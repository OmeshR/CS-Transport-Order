import tkinter as tk
from tkinter import messagebox, ttk
from openpyxl import load_workbook
from datetime import datetime
import requests
import os
from PIL import Image, ImageTk

# Load Excel workbooks and worksheets
script_dir = os.path.dirname(os.path.abspath(__file__))
uptime_workbook_path = os.path.join(script_dir, "Uptime_Transport.xlsx")
route_workbook_path = os.path.join(script_dir, "Route.xlsx")
uptime_workbook = load_workbook(uptime_workbook_path)
uptime_sheet = uptime_workbook.active

route_workbook = load_workbook(route_workbook_path)
route_sheet = route_workbook.active

# Define cell locations for each section (adjust based on actual Excel structure)
shift_sections = {
    "Morning shift pickup": {"start_row": 7, "start_col": 1, "time": "5.30am"},
    "Night shift pickup": {"start_row": 14, "start_col": 1, "time": "9.30pm"},
    "Mid shift drop": {"start_row": 20, "start_col": 1, "time": "10.30pm"},
    "Night shift drop": {"start_row": 27, "start_col": 1, "time": "6.30am"},
}

# Global variables
current_shift = "Morning shift pickup"
passenger_data = {"Morning shift pickup": [], "Night shift pickup": [], "Mid shift drop": [], "Night shift drop": []}

# Function to get current date from the network
def get_network_date():
    try:
        response = requests.get("http://worldtimeapi.org/api/timezone/Etc/UTC")
        if response.status_code == 200:
            network_date = datetime.fromisoformat(response.json()["datetime"]).date()
            return network_date
        else:
            return datetime.now().date()
    except:
        return datetime.now().date()

# Function to find the route based on name from Route.xlsx
def get_route_from_name(name):
    for row in range(2, route_sheet.max_row + 1):
        route_name = route_sheet.cell(row=row, column=1).value
        if route_name == name:
            return route_sheet.cell(row=row, column=2).value
    return None

# Function to add passenger with automated route retrieval
def add_passenger():
    name = name_entry.get()
    if not name:
        messagebox.showwarning("Input Required", "Please enter Passenger Name.")
        return

    # Retrieve route from Route.xlsx based on name
    route = get_route_from_name(name)
    if not route:
        messagebox.showwarning("Route Not Found", "No route found for this name in Route.xlsx.")
        return

    # Add passenger to current shift data with the retrieved route
    existing_route = False
    for i, (existing_route_name, passengers) in enumerate(passenger_data[current_shift]):
        if existing_route_name == route:
            passenger_data[current_shift][i][1].append(name)
            existing_route = True
            break

    if not existing_route:
        passenger_data[current_shift].append([route, [name]])

    # If adding to "Night shift pickup", also add the same passenger to "Night shift drop"
    if current_shift == "Night shift pickup":
        night_drop_existing = False
        for i, (night_route, night_passengers) in enumerate(passenger_data["Night shift drop"]):
            if night_route == route:
                passenger_data["Night shift drop"][i][1].append(name)
                night_drop_existing = True
                break
        if not night_drop_existing:
            passenger_data["Night shift drop"].append([route, [name]])

    name_entry.delete(0, tk.END)

# Function to switch to next shift
def next_shift():
    global current_shift
    shifts = list(shift_sections.keys())
    idx = shifts.index(current_shift)
    current_shift = shifts[(idx + 1) % len(shifts)]
    shift_label.config(text=f"Current Shift: {current_shift}")

# Function to switch to previous shift
def previous_shift():
    global current_shift
    shifts = list(shift_sections.keys())
    idx = shifts.index(current_shift)
    current_shift = shifts[(idx - 1) % len(shifts)]
    shift_label.config(text=f"Current Shift: {current_shift}")

# Function to clear specific rows from the Excel sheet
def clear_data():
    clear_ranges = [(7, 12), (14, 18), (20, 25), (27, 32)]
    for start_row, end_row in clear_ranges:
        for row in range(start_row, end_row + 1):
            for col in range(1, uptime_sheet.max_column + 1):
                uptime_sheet.cell(row=row, column=col).value = None
    for row in [1, 2, 3]:
        uptime_sheet.cell(row=row, column=7, value=None)
    uptime_workbook.save(uptime_workbook_path)
    messagebox.showinfo("Data Cleared", "Selected entries have been cleared from the table.")

# Function to save data to Excel and open the file
def save_to_excel():
    today_date = get_network_date()
    uptime_sheet.merge_cells(start_row=1, start_column=7, end_row=1, end_column=8)
    uptime_sheet.cell(row=1, column=7, value=today_date)
    selected_name = name_var.get()
    uptime_sheet.merge_cells(start_row=2, start_column=7, end_row=2, end_column=8)
    uptime_sheet.cell(row=2, column=7, value=selected_name)
    route_count_total = 0
    for shift, data in passenger_data.items():
        section = shift_sections[shift]
        row = section["start_row"]
        col = section["start_col"]
        shift_time = section["time"]
        for route_name, passengers in data:
            uptime_sheet.cell(row=row, column=col, value=route_name)
            for i, passenger in enumerate(passengers):
                uptime_sheet.cell(row=row, column=col + 1 + i, value=passenger)
            uptime_sheet.cell(row=row, column=col + 5, value=len(passengers))
            uptime_sheet.cell(row=row, column=col + 6, value="Budget Car")
            uptime_sheet.cell(row=row, column=col + 7, value=shift_time)
            route_count_total += 1
            row += 1
    uptime_sheet.merge_cells(start_row=3, start_column=7, end_row=3, end_column=8)
    uptime_sheet.cell(row=3, column=7, value=route_count_total)
    uptime_workbook.save(uptime_workbook_path)
    os.startfile(uptime_workbook_path)
    messagebox.showinfo("Excel Saved", "Data has been saved and the file is opened.")

# Create GUI
root = tk.Tk()
root.title("Passenger Roster Entry")

# Set background gradient
gradient_canvas = tk.Canvas(root, width=600, height=500)
gradient_canvas.pack(fill="both", expand=True)
gradient_canvas.create_rectangle(0, 0, 600, 500, fill="#FFA500", outline="")
gradient_canvas.create_rectangle(0, 0, 600, 250, fill="#FFD580", outline="")

# Add logo
logo_path = os.path.join(script_dir, "Uptime logo.png")
logo_image = Image.open(logo_path)
resized_logo = logo_image.resize((100, 100), Image.LANCZOS)
logo = ImageTk.PhotoImage(logo_image)
logo_label = tk.Label(root, image=logo, bg="#FFD580")
logo_label.place(x=250, y=10)

shift_label = tk.Label(root, text=f"Current Shift: {current_shift}", font=("Arial", 14), bg="#FFD580")
shift_label.place(x=50, y=130)

name_label = tk.Label(root, text="Passenger Name:", bg="#FFA500")
name_label.place(x=50, y=180)
name_entry = tk.Entry(root, width=30)
name_entry.place(x=180, y=180)

select_name_label = tk.Label(root, text="Select Name:", bg="#FFA500")
select_name_label.place(x=50, y=220)
name_var = tk.StringVar()
name_dropdown = ttk.Combobox(root, textvariable=name_var, values=["Imesha", "Ashwini", "Omesh"])
name_dropdown.current(0)
name_dropdown.place(x=180, y=220)

# Buttons
add_button = tk.Button(root, text="Add Passenger", command=add_passenger)
add_button.place(x=50, y=270)

next_button = tk.Button(root, text="Next Shift", command=next_shift)
next_button.place(x=180, y=270)

prev_button = tk.Button(root, text="Previous Shift", command=previous_shift)
prev_button.place(x=290, y=270)

generate_button = tk.Button(root, text="Generate", command=save_to_excel)
generate_button.place(x=50, y=330)

clear_button = tk.Button(root, text="Clear Data", command=clear_data)
clear_button.place(x=180, y=330)

root.mainloop()
